import logging
import os
import random
import sqlite3
from datetime import datetime
import aiohttp

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
TOKEN = "8356413290:AAGvwTj0fK8_QxwwrPHhB7Kdw6UlblbmECE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
DB_PATH = "fridge.db"

AI_API_URL = os.getenv("AI_API_URL", "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateText")
AI_API_KEY = os.getenv("AI_API_KEY", "")
AI_MODEL = os.getenv("AI_MODEL", "gemini-2.5-flash")

# ============ –õ–û–ì–ò ============
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============ –ë–ê–ó–ê –î–ê–ù–ù–´–• ============
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    expiry_date TEXT NOT NULL,
    created_at TEXT NOT NULL
)
""")
conn.commit()

# ============ –õ–û–ö–ê–õ–¨–ù–´–ï –†–ï–¶–ï–ü–¢–´ ============
RECIPES = [
    {"title": "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏", "ingredients": ["—Å–ø–∞–≥–µ—Ç—Ç–∏", "–ø–æ–º–∏–¥–æ—Ä—ã", "—á–µ—Å–Ω–æ–∫", "–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", "—Å–æ–ª—å"], "steps": ["–û—Ç–≤–∞—Ä–∏—Ç—å –ø–∞—Å—Ç—É –¥–æ –∞–ª—å –¥–µ–Ω—Ç–µ", "–û–±–∂–∞—Ä–∏—Ç—å —á–µ—Å–Ω–æ–∫ –∏ –ø–æ–º–∏–¥–æ—Ä—ã –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ", "–°–º–µ—à–∞—Ç—å —Å –ø–∞—Å—Ç–æ–π –∏ –ø–æ—Å–æ–ª–∏—Ç—å"]},
    {"title": "–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º", "ingredients": ["—è–π—Ü–∞", "—Å—ã—Ä", "—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ", "—Å–æ–ª—å"], "steps": ["–í–∑–±–∏—Ç—å —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏", "–†–∞—Å—Ç–æ–ø–∏—Ç—å –º–∞—Å–ª–æ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ", "–í—ã–ª–∏—Ç—å —è–π—Ü–∞, –¥–æ–±–∞–≤–∏—Ç—å —Å—ã—Ä –∏ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"]},
    {"title": "–°–∞–ª–∞—Ç —Å –æ–≥—É—Ä—Ü–æ–º", "ingredients": ["–æ–≥—É—Ä–µ—Ü", "—É–∫—Ä–æ–ø", "—Å–º–µ—Ç–∞–Ω–∞", "—Å–æ–ª—å"], "steps": ["–ù–∞—Ä–µ–∑–∞—Ç—å –æ–≥—É—Ä–µ—Ü", "–î–æ–±–∞–≤–∏—Ç—å —É–∫—Ä–æ–ø –∏ —Å–º–µ—Ç–∞–Ω—É", "–ü–æ—Å–æ–ª–∏—Ç—å –∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å"]},
]

def format_recipe_block(title, ingredients, steps, time=None, kcal=None):
    lines = [f"üçΩ {title}", "", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:"]
    lines += [f"‚Ä¢ {i}" for i in ingredients]
    lines += ["", "–®–∞–≥–∏:"]
    lines += [f"{idx+1}. {step}" for idx, step in enumerate(steps)]
    if time:
        lines += ["", f"–í—Ä–µ–º—è: {time}"]
    if kcal:
        lines += [f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {kcal}"]
    return "\n".join(lines)

def format_recipe_local(r):
    return format_recipe_block(r["title"], r["ingredients"], r["steps"])

def is_valid_date(s):
    try:
        datetime.strptime(s, "%Y-%m-%d")
        return True
    except:
        return False

def build_recipe_prompt(ingredients=None):
    ing = ", ".join(ingredients) if ingredients else "–ª—é–±—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞"
    return (f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 1 —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏–∑: {ing}.\n"
            "–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ:\n"
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
            "–®–∞–≥–∏:\n"
            "–í—Ä–µ–º—è:\n"
            "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:\n"
            "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.")

async def ask_ai_for_recipe(ingredients=None):
    if not AI_API_KEY:
        r = random.choice(RECIPES)
        return format_recipe_local(r)

    headers = {
        "Authorization": f"Bearer {AI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": AI_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ."},
            {"role": "user", "content": build_recipe_prompt(ingredients)}
        ],
        "temperature": 0.9,
        "max_tokens": 600,
    }
    logger.info(f"–ó–∞–ø—Ä–æ—Å AI: {payload}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(AI_API_URL, json=payload, headers=headers, timeout=60) as resp:
                text_resp = await resp.text()
                logger.info(f"–û—Ç–≤–µ—Ç AI —Å—Ç–∞—Ç—É—Å: {resp.status}")
                logger.info(f"–û—Ç–≤–µ—Ç AI —Ç–µ–ª–æ: {text_resp}")
                if resp.status != 200:
                    r = random.choice(RECIPES)
                    return format_recipe_local(r)
                data = await resp.json()
                content = data.get("choices", [{}])[0].get("message", {}).get("content")
                if not content:
                    r = random.choice(RECIPES)
                    return format_recipe_local(r)
                return content
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ AI: {e}")
        r = random.choice(RECIPES)
        return format_recipe_local(r)

# ============ –ö–û–ú–ê–ù–î–´ –ò –ö–ù–û–ü–ö–ò ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å Cook Bro", callback_data="cookbro")],
        [InlineKeyboardButton("/premium –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ PRO –∑–∞ 1 ‚ÇΩ", callback_data="premium")],
        [InlineKeyboardButton("/profile –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ú–µ–Ω—é:",
        reply_markup=markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <YYYY-MM-DD> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/del <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ ID\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <YYYY-MM-DD>")
        return
    name = " ".join(context.args[:-1]).strip()
    expiry = context.args[-1].strip()
    if not name:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return
    if not is_valid_date(expiry):
        await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-10-01.")
        return
    user_id = update.effective_user.id
    cur.execute("INSERT INTO products (user_id, name, expiry_date, created_at) VALUES (?, ?, ?, ?)",
                (user_id, name, expiry, datetime.utcnow().isoformat(timespec="seconds")))
    conn.commit()
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {name} —Å–æ —Å—Ä–æ–∫–æ–º –¥–æ {expiry}")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rows = cur.execute("SELECT id, name, expiry_date FROM products WHERE user_id = ? ORDER BY expiry_date ASC", (user_id,)).fetchall()
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <YYYY-MM-DD>")
        return
    lines = [f"{r[0]}. {r[1]} ‚Äî –¥–æ {r[2]}" for r in rows]
    await update.message.reply_text("\n".join(lines))

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <id> (id —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /list)")
        return
    pid = int(context.args[0])
    user_id = update.effective_user.id
    cur.execute("DELETE FROM products WHERE id = ? AND user_id = ?", (pid, user_id))
    conn.commit()
    if cur.rowcount:
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: –∑–∞–ø–∏—Å—å #{pid}")
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cookbro":
        await query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cook Bro! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É.")
    elif query.data == "premium":
        await query.edit_message_text("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ PRO –≤–µ—Ä—Å–∏—é –∑–∞ 1 ‚ÇΩ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–∫–æ—Ä–æ...")
    elif query.data == "profile":
        await query.edit_message_text("–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("del", del_command))

    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.run_polling()

if __name__ == "__main__":
    main()
